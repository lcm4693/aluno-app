name: Deploy Frontend

on:
  workflow_dispatch: # ðŸ‘ˆ permite rodar manualmente pelo GitHub
    inputs:
      alvo:
        description: "Qual parte deseja publicar?"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - frontend
          - backend

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.alvo == 'frontend' || github.event.inputs.alvo == 'all' }}

    defaults:
      run:
        working-directory: frontend/aluno-front

    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v3

      - name: Instalar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Instalar dependÃªncias
        run: npm install

      - name: Build do Angular
        run: npm run build

      - name: Verificar versÃ£o do AWS CLI
        run: aws --version
        working-directory: .

      - name: Deploy para S3-
        run: aws s3 sync ./dist/aluno-front/browser/ s3://$S3_BUCKET_NAME --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

      - name: Invalidar cache do CloudFront (opcional)
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DIST_ID --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}

  deploy-backend:
    runs-on: ubuntu-latest
    # needs: deploy-frontend # sÃ³ roda depois do frontend (opcional)

    if: ${{ github.event.inputs.alvo == 'backend' || github.event.inputs.alvo == 'all' }}

    defaults:
      run:
        working-directory: api/alunos-app

    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v3

      - name: Instalar chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Enviar arquivos para a EC2
        run: |
          rsync -avz --delete --exclude 'alunos.db' . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_PATH }}

      - name: Instalar dependÃªncias e reiniciar serviÃ§o
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ${{ secrets.EC2_PATH }}
          source venv/bin/activate
          pip install -r requirements.txt
          sudo systemctl restart aluno-app
          EOF
